#include <WiFi.h>
#include <FirebaseESP32.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <esp_now.h>
#include <arduinoFFT.h>

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels

#define FIREBASE_HOST "https://glucose-monitoring-nirs-default-rtdb.firebaseio.com/"  // Link firebase database
#define FIREBASE_AUTH "Be4yj3Y1YaGJLS3ThPxkUHlhg7xaG0hKMZ96pDUU"            // database secret

// Replace with your network credentials
const char* ssid = "LEMOT";
const char* password = "keamanan1";

const int buttonPin = 34;  // Digital pin the push button is connected to

MAX30105 particleSensor;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);
FirebaseAuth auth;
FirebaseConfig config;
FirebaseData firebaseData;
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

unsigned long previousMillis = 0;  // Variable to store the last time sensor value was printed
unsigned long sumPeriod = 60000;   // Summing period (in milliseconds), 1 minute
unsigned long sumStartTime = 0;    // Variable to store the start time for summing
unsigned long totalSumStartTime = 0; // Variable to store the start time for total summing
unsigned long sumValue = 0;        // Variable to store the sum of sensor values
unsigned long totalSumValue = 0;   // Variable to store the total sum of sensor values for 2 minutes
int readingsCount = 0;             // Number of readings during summing period
int totalReadingsCount = 0;        // Number of readings during total summing period
bool buttonPressed = false;        // Flag to indicate if button is pressed

// Variables to save date and time
String formattedDate;
String dayStamp;
String timeStamp;

String NAMA = "0";
String USIA = "0";
String JENISKELAMIN = "0";

float mgdl;

// Universal MAC Address
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// Structure to send data
typedef struct struct_message {
  float mgdl;
  char timestamp[20];
} struct_message;

struct_message myData;
struct_message incomingReadings;
esp_now_peer_info_t peerInfo;

// FFT Code Variables
const uint16_t samples = 64; // This value MUST ALWAYS be a power of 2
const double samplingFrequency = 1000; // Sampling frequency in Hz
unsigned int sampling_period_us;
unsigned long microseconds;
double vReal[samples];
double vImag[samples];
ArduinoFFT<double> FFT = ArduinoFFT<double>(vReal, vImag, samples, samplingFrequency);

void simpleGaussianFilter(double *data, int size) {
  double filter[5] = {0.0625, 0.25, 0.375, 0.25, 0.0625}; // Simple Gaussian filter
  double filteredData[size];
  
  for (int i = 0; i < size; i++) {
    filteredData[i] = 0.0;
    for (int j = 0; j < 5; j++) {
      if (i + j - 2 >= 0 && i + j - 2 < size) {
        filteredData[i] += data[i + j - 2] * filter[j];
      }
    }
  }

  for (int i = 0; i < size; i++) {
    data[i] = filteredData[i];
  }
}

void FFT_process() {
  for (int i = 0; i < samples; i++) {
    microseconds = micros();  // Overflows after around 70 minutes!

    vReal[i] = particleSensor.getIR();  // Get the IR value from the sensor
    vImag[i] = 0;

    while (micros() < (microseconds + sampling_period_us)) {
      // do nothing to wait the correct time for sampling
    }
  }

  simpleGaussianFilter(vReal, samples); // Apply simple Gaussian filter

  FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward);
  FFT.compute(FFTDirection::Forward);
  FFT.complexToMagnitude();
}

void OMP(double *data, int size) {
  double residual[size];
  double selectedAtoms[size];
  double atom;

  for (int i = 0; i < size; i++) {
    residual[i] = data[i];
    selectedAtoms[i] = 0.0;
  }

  for (int iter = 0; iter < 5; iter++) {
    int maxIndex = 0;
    double maxValue = 0.0;

    for (int i = 0; i < size; i++) {
      double value = fabs(residual[i]);
      if (value > maxValue) {
        maxValue = value;
        maxIndex = i;
      }
    }

    atom = data[maxIndex];
    selectedAtoms[maxIndex] = atom;

    for (int i = 0; i < size; i++) {
      residual[i] -= atom * data[i];
    }
  }

  for (int i = 0; i < size; i++) {
    data[i] = selectedAtoms[i];
  }
}

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

// Callback when data is received
void OnDataRecv(const esp_now_recv_info_t *recv_info, const uint8_t *incomingData, int len) {
  memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("Received mgdl: ");
  Serial.println(incomingReadings.mgdl);
  Serial.print("Received timestamp: ");
  Serial.println(incomingReadings.timestamp);
}

void setup() {
  Serial.begin(9600);         // Initialize serial communication
  pinMode(buttonPin, INPUT);  // Set push button pin as input with internal pull-up resistor

  // Initialize and clear the display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // Address 0x3C for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {  //Use default I2C port, 400kHz speed
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup();                     //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A);  //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0);   //Turn off Green LED

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("Connecting to WiFi...");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Connecting to WiFi...");
    display.display();
    delay(1000);
  }

  Serial.println("Connected to WiFi");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Connected to WiFi");
  display.display();

  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;

  Firebase.begin(&config, &auth);

  // Initialize NTP client
  timeClient.begin();
  timeClient.setTimeOffset(25200);
  timeClient.forceUpdate();

  delay(3000);

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register ESP-NOW callback functions
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);

  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Calculate sampling period
  sampling_period_us = round(1000000 * (1.0 / samplingFrequency));
}

void loop() {
  unsigned long currentMillis = millis();  // Get the current time
  while (!timeClient.update()) {
    timeClient.forceUpdate();
  }
  formattedDate = timeClient.getFormattedDate();

  if (NAMA != "0" && USIA != "0" && JENISKELAMIN != "0") {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.println("Press button to");
    display.setCursor(0, 10);
    display.println("start");
    display.display();
  } else {
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.println("Silahkan isi");
    display.setCursor(0, 10);
    display.println("Biodata");
    display.display();
    // Get data from Firebase
    if (Firebase.getString(firebaseData, "/inputdata_C/Name")) {
      if (firebaseData.dataType() == "string") {
        NAMA = firebaseData.stringData();
        NAMA.trim();             // Remove leading and trailing whitespaces
        NAMA.replace("\"", "");  // Remove all instances of quotation marks
        NAMA.replace("\\", "");  // Remove all
        Serial.println("Data from Firebase: " + NAMA);
      }
    }

    if (Firebase.getString(firebaseData, "/inputdata_C/Age")) {
      if (firebaseData.dataType() == "string") {
        USIA = firebaseData.stringData();
        USIA.trim();             // Remove leading and trailing whitespaces
        USIA.replace("\"", "");  // Remove all instances of quotation marks
        USIA.replace("\\", "");  // Remove all
        Serial.println("Data from Firebase: " + USIA);
      }
    }

    if (Firebase.getString(firebaseData, "/inputdata_C/Gender")) {
      if (firebaseData.dataType() == "string") {
        JENISKELAMIN = firebaseData.stringData();
        JENISKELAMIN.trim();             // Remove leading and trailing whitespaces
        JENISKELAMIN.replace("\"", "");  // Remove all instances of quotation marks
        JENISKELAMIN.replace("\\", "");  // Remove all
        Serial.println("Data from Firebase: " + JENISKELAMIN);
      }
    }
  }

  // Check if button is pressed to start the process
  if (digitalRead(buttonPin) == HIGH && !buttonPressed && NAMA != "0" && USIA != "0" && JENISKELAMIN != "0" && NAMA != "" && USIA != "" && JENISKELAMIN != "") {
    buttonPressed = true;
    sumStartTime = currentMillis;
    totalSumStartTime = currentMillis;
  }

  // Read sensor value every 0.5 second if button is pressed
  if (buttonPressed && currentMillis - previousMillis >= 500) {
    long irValue = particleSensor.getIR();
    previousMillis = currentMillis;

    Serial.print("IR Value: ");
    Serial.println(irValue);

    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0, 35);
    display.println(irValue);
    display.display();

    sumValue += irValue;
    totalSumValue += irValue;
    readingsCount++;
    totalReadingsCount++;

    // Call FFT process function
    FFT_process();
    OMP(vReal, samples);

    // Check if 1 minute has passed
    if (currentMillis - sumStartTime >= sumPeriod) {
      float averageIR = sumValue / readingsCount;
      Serial.print("Average IR Value for 1 minute: ");
      Serial.println(averageIR);

      mgdl = (294660 - averageIR) / 2223.1;

      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0, 0);
      display.print("Mg/dL:");
      display.setCursor(0, 20);
      display.print(mgdl);
      display.display();

      delay(5000); // Display the result for 5 seconds

      formattedDate = timeClient.getFormattedDate();
      int splitT = formattedDate.indexOf("T");
      dayStamp = formattedDate.substring(0, splitT);
      timeStamp = formattedDate.substring(splitT + 1, formattedDate.length() - 1);

      FirebaseJson json;
      json.set("Date", dayStamp);
      json.set("Time", timeStamp);
      json.set("AvgIR", averageIR);
      json.set("Name", NAMA);
      json.set("Age", USIA);
      json.set("Gender", JENISKELAMIN);
      
      String mgdlString = String(mgdl, 2);
      json.set("mgdl", mgdlString);
      Firebase.setString(firebaseData, "mgdlC", mgdlString);

      // Send data via ESP-NOW
      myData.mgdl = mgdl;
      strncpy(myData.timestamp, timeStamp.c_str(), sizeof(myData.timestamp));
      myData.timestamp[sizeof(myData.timestamp) - 1] = '\0';
      esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

      if (result == ESP_OK) {
        Serial.println("Sent with success");
      } else {
        Serial.println("Error sending the data");
      }

      // Reset sum for the next minute
      sumValue = 0;
      readingsCount = 0;
      sumStartTime = currentMillis;  // Restart timing for summing
    }

    // Check if 2 minutes have passed
    if (currentMillis - totalSumStartTime >= 2 * sumPeriod) {
      float totalAverageIR = totalSumValue / totalReadingsCount;
      Serial.print("Total Average IR Value for 2 minutes: ");
      Serial.println(totalAverageIR);

      mgdl = (294660 - totalAverageIR) / 2223.1;

      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0, 0);
      display.print("Mg/dL:");
      display.setCursor(0, 20);
      display.print(mgdl);
      display.display();

      delay(5000); // Display the result for 5 seconds

      formattedDate = timeClient.getFormattedDate();
      int splitT = formattedDate.indexOf("T");
      dayStamp = formattedDate.substring(0, splitT);
      timeStamp = formattedDate.substring(splitT + 1, formattedDate.length() - 1);

      FirebaseJson totalJson;
      totalJson.set("Date", dayStamp);
      totalJson.set("Time", timeStamp);
      totalJson.set("AvgIR", totalAverageIR);
      totalJson.set("Name", NAMA);
      totalJson.set("Age", USIA);
      totalJson.set("Gender", JENISKELAMIN);

      String mgdlString = String(mgdl, 2);
      totalJson.set("mgdl", mgdlString);
      Firebase.setString(firebaseData, "mgdlC", mgdlString);

      // Send data via ESP-NOW
      myData.mgdl = mgdl;
      strncpy(myData.timestamp, timeStamp.c_str(), sizeof(myData.timestamp));
      myData.timestamp[sizeof(myData.timestamp) - 1] = '\0';
      esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

      if (result == ESP_OK) {
        Serial.println("Sent with success");
      } else {
        Serial.println("Error sending the data");
      }

      // Reset total sum for the next measurement session
      totalSumValue = 0;
      totalReadingsCount = 0;
      buttonPressed = false;
      NAMA = "0";
      USIA = "0";
      JENISKELAMIN = "0";

      display.clearDisplay();
      Firebase.setString(firebaseData, "mgdlC", "0");
      Firebase.setString(firebaseData, "inputdata_C/Name", NAMA);
      Firebase.setString(firebaseData, "inputdata_C/Age", USIA);
      Firebase.setString(firebaseData, "inputdata_C/Gender", JENISKELAMIN);
    }
  }
}
